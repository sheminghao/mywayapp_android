package com.mywaytec.myway;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mywaytec.myway.model.db.FingerWarkInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINGER_WARK_INFO".
*/
public class FingerWarkInfoDao extends AbstractDao<FingerWarkInfo, Long> {

    public static final String TABLENAME = "FINGER_WARK_INFO";

    /**
     * Properties of entity FingerWarkInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FingerWarkId = new Property(1, byte.class, "fingerWarkId", false, "FINGER_WARK_ID");
        public final static Property Uid = new Property(2, String.class, "uid", false, "UID");
        public final static Property FingerName = new Property(3, String.class, "fingerName", false, "FINGER_NAME");
    }


    public FingerWarkInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FingerWarkInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINGER_WARK_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FINGER_WARK_ID\" INTEGER NOT NULL ," + // 1: fingerWarkId
                "\"UID\" TEXT," + // 2: uid
                "\"FINGER_NAME\" TEXT);"); // 3: fingerName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINGER_WARK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FingerWarkInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFingerWarkId());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String fingerName = entity.getFingerName();
        if (fingerName != null) {
            stmt.bindString(4, fingerName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FingerWarkInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getFingerWarkId());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String fingerName = entity.getFingerName();
        if (fingerName != null) {
            stmt.bindString(4, fingerName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FingerWarkInfo readEntity(Cursor cursor, int offset) {
        FingerWarkInfo entity = new FingerWarkInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            (byte) cursor.getShort(offset + 1), // fingerWarkId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // fingerName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FingerWarkInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFingerWarkId((byte) cursor.getShort(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFingerName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FingerWarkInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FingerWarkInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FingerWarkInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
