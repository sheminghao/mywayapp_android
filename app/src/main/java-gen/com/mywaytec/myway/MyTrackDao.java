package com.mywaytec.myway;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mywaytec.myway.model.db.StringConverter;
import java.util.List;

import com.mywaytec.myway.model.db.MyTrack;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_TRACK".
*/
public class MyTrackDao extends AbstractDao<MyTrack, Long> {

    public static final String TABLENAME = "MY_TRACK";

    /**
     * Properties of entity MyTrack.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TrackName = new Property(1, String.class, "trackName", false, "TRACK_NAME");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Duration = new Property(3, String.class, "duration", false, "DURATION");
        public final static Property TotalDistance = new Property(4, String.class, "totalDistance", false, "TOTAL_DISTANCE");
        public final static Property Tracks = new Property(5, String.class, "tracks", false, "TRACKS");
    }

    private final StringConverter tracksConverter = new StringConverter();

    public MyTrackDao(DaoConfig config) {
        super(config);
    }
    
    public MyTrackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_TRACK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TRACK_NAME\" TEXT," + // 1: trackName
                "\"TIME\" TEXT," + // 2: time
                "\"DURATION\" TEXT," + // 3: duration
                "\"TOTAL_DISTANCE\" TEXT," + // 4: totalDistance
                "\"TRACKS\" TEXT);"); // 5: tracks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_TRACK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MyTrack entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trackName = entity.getTrackName();
        if (trackName != null) {
            stmt.bindString(2, trackName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(4, duration);
        }
 
        String totalDistance = entity.getTotalDistance();
        if (totalDistance != null) {
            stmt.bindString(5, totalDistance);
        }
 
        List tracks = entity.getTracks();
        if (tracks != null) {
            stmt.bindString(6, tracksConverter.convertToDatabaseValue(tracks));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MyTrack entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trackName = entity.getTrackName();
        if (trackName != null) {
            stmt.bindString(2, trackName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(4, duration);
        }
 
        String totalDistance = entity.getTotalDistance();
        if (totalDistance != null) {
            stmt.bindString(5, totalDistance);
        }
 
        List tracks = entity.getTracks();
        if (tracks != null) {
            stmt.bindString(6, tracksConverter.convertToDatabaseValue(tracks));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MyTrack readEntity(Cursor cursor, int offset) {
        MyTrack entity = new MyTrack( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // trackName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // totalDistance
            cursor.isNull(offset + 5) ? null : tracksConverter.convertToEntityProperty(cursor.getString(offset + 5)) // tracks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MyTrack entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrackName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalDistance(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTracks(cursor.isNull(offset + 5) ? null : tracksConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MyTrack entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MyTrack entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MyTrack entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
